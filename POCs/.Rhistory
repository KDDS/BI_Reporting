install.packages("readr")
install.packages("shiny")
install.packages("plotly")
install.packages("xlsx")
install.packages("tidyr")
install.packages("jsonlite")
install.packages("httr")
library(readxl)
sample <- read_excel("sample.xlsx")
View(sample)
library(readxl)
sample <- read_excel("sample.xlsx")
View(sample)
sample <- read_excel("sample.xlsx")
View(sample)
library(MASS)   # Load for Melanoma Data
library(Hmisc)  # Load for latex function
library(data.table)  # Used for aggregating
mela <- data.table(Melanoma)
# Aggregating
mela.status <- mela[, list(avgThick = mean(thickness)), by = status]
# Conditional formatting
cellTex <- matrix(rep("", NROW(mela.status) * NCOL(mela.status)),
nrow = NROW(mela.status))
cellTex[,1] <- ifelse(mela.status$avgThick > 4, "cellcolor{red}",
ifelse(mela.status$avgThick < 3, "cellcolor{green}",
""))
# Shading alternate rows
my.rownamesTexCmd <- rep("", nrow(mela.status))
index <- (1:nrow(mela.status)/2) == (1:nrow(mela.status)%/%2)
my.rownamesTexCmd[index] <- "shadeRow"
# Creating the .tex file
# Note, this is currently printed in R console
latex(round(mela.status, 2), title = '', file = '', booktabs = TRUE,
rownamesTexCmd = my.rownamesTexCmd, cellTexCmds = cellTex,
rowname = NULL)
install.packages("latexpdf")
library(MASS)   # Load for Melanoma Data
library(Hmisc)  # Load for latex function
library(data.table)  # Used for aggregating
mela <- data.table(Melanoma)
# Aggregating
mela.status <- mela[, list(avgThick = mean(thickness)), by = status]
# Conditional formatting
cellTex <- matrix(rep("", NROW(mela.status) * NCOL(mela.status)),
nrow = NROW(mela.status))
cellTex[,1] <- ifelse(mela.status$avgThick > 4, "cellcolor{red}",
ifelse(mela.status$avgThick < 3, "cellcolor{green}",
""))
# Shading alternate rows
my.rownamesTexCmd <- rep("", nrow(mela.status))
index <- (1:nrow(mela.status)/2) == (1:nrow(mela.status)%/%2)
my.rownamesTexCmd[index] <- "shadeRow"
# Creating the .tex file
# Note, this is currently printed in R console
latex(round(mela.status, 2), title = '', file = '', booktabs = TRUE,
rownamesTexCmd = my.rownamesTexCmd, cellTexCmds = cellTex,
rowname = NULL)
library("latexpdf", lib.loc="~/R/win-library/3.5")
library(MASS)   # Load for Melanoma Data
library(Hmisc)  # Load for latex function
library(data.table)  # Used for aggregating
mela <- data.table(Melanoma)
# Aggregating
mela.status <- mela[, list(avgThick = mean(thickness)), by = status]
# Conditional formatting
cellTex <- matrix(rep("", NROW(mela.status) * NCOL(mela.status)),
nrow = NROW(mela.status))
cellTex[,1] <- ifelse(mela.status$avgThick > 4, "cellcolor{red}",
ifelse(mela.status$avgThick < 3, "cellcolor{green}",
""))
# Shading alternate rows
my.rownamesTexCmd <- rep("", nrow(mela.status))
index <- (1:nrow(mela.status)/2) == (1:nrow(mela.status)%/%2)
my.rownamesTexCmd[index] <- "shadeRow"
# Creating the .tex file
# Note, this is currently printed in R console
latex(round(mela.status, 2), title = '', file = '', booktabs = TRUE,
rownamesTexCmd = my.rownamesTexCmd, cellTexCmds = cellTex,
rowname = NULL)
library(MASS)   # Load for Melanoma Data
library(Hmisc)  # Load for latex function
library(data.table)  # Used for aggregating
mela <- data.table(Melanoma)
# Aggregating
mela.status <- mela[, list(avgThick = mean(thickness)), by = status]
# Conditional formatting
cellTex <- matrix(rep("", NROW(mela.status) * NCOL(mela.status)),
nrow = NROW(mela.status))
cellTex[,1] <- ifelse(mela.status$avgThick > 4, "cellcolor{red}",
ifelse(mela.status$avgThick < 3, "cellcolor{green}",
""))
# Shading alternate rows
my.rownamesTexCmd <- rep("", nrow(mela.status))
index <- (1:nrow(mela.status)/2) == (1:nrow(mela.status)%/%2)
my.rownamesTexCmd[index] <- "shadeRow"
library(MASS)   # Load for Melanoma Data
library(Hmisc)  # Load for latex function
library(data.table)  # Used for aggregating
mela <- data.table(Melanoma)
# Aggregating
mela.status <- mela[, list(avgThick = mean(thickness)), by = status]
# Conditional formatting
cellTex <- matrix(rep("", NROW(mela.status) * NCOL(mela.status)),
nrow = NROW(mela.status))
cellTex[,1] <- ifelse(mela.status$avgThick > 4, "cellcolor{red}",
ifelse(mela.status$avgThick < 3, "cellcolor{green}",
""))
# Shading alternate rows
my.rownamesTexCmd <- rep("", nrow(mela.status))
index <- (1:nrow(mela.status)/2) == (1:nrow(mela.status)%/%2)
my.rownamesTexCmd[index] <- "shadeRow"
# Creating the .tex file
# Note, this is currently printed in R console
latex(round(mela.status, 2), title = '', file = '', booktabs = TRUE,
rownamesTexCmd = my.rownamesTexCmd, cellTexCmds = cellTex,
rowname = NULL)
% Including a similar command in your preamble to define row shading.
\providecommand{\shadeRow}{\rowcolor[rgb]{0, 0.99, 0}}
%
%
\begin{table}[!tbp]
\begin{center}
\begin{tabular}{rr}
\toprule
\multicolumn{1}{c}{status}&\multicolumn{1}{c}{avgThick}\tabularnewline
\midrule
$3$&   $3.72$\tabularnewline
\shadeRow   $2$&\cellcolor{green}   $2.24$\tabularnewline
$1$&\cellcolor{red}   $4.31$\tabularnewline
\bottomrule
\end{tabular}
\end{center}
\end{table}
install.packages("condformat")
library("condformat", lib.loc="~/R/win-library/3.5")
sample <- read_excel("sample.xlsx")
View(sample)
condformat(sample[c(3:33)])%>%
rule_fill_discrete(c(sample$`Net `),expression = $D3>0.5,
colours = c("TRUE"="#FF0000"))%>%
theme_grob(rows = TRUE)%>%
condformat2grob()
sample <- read_excel("sample.xlsx")
View(sample)
condformat(sample[c(3:33)])%>%
rule_fill_discrete(c(sample$`Net `),expression = sample$`Net `>0.5,
colours = c("TRUE"="#FF0000"))%>%
theme_grob(rows = TRUE)%>%
condformat2grob()
data(sample)
condformat(sample[1:5,])
condformat(sample[1:5,]) %>% rule_fill_gradient(sample$`Net `)
condformat(sample[1:5,]) %>%
rule_fill_discrete(sample$`Net `, expression=sample$`Net ` < 0.5)
data(sample)
condformat(sample[1:5,])
condformat(sample[1:5,]) %>% rule_fill_gradient(sample$`Net `)
condformat(sample[1:5,]) %>%
rule_fill_discrete(sample$`Net `, expression=sample$`Net ` > 0.5)
data(sample)
condformat(sample[1:5,])
condformat(sample[1:5,]) %>% rule_fill_gradient(sample$`Net `)
condformat(sample[1:5,]) %>%
rule_fill_discrete( expression=sample$`Net ` > 0.5)
data(sample)
condformat(sample[1:33,])
condformat(sample[1:33,]) %>% rule_fill_gradient(sample$`Net `)
condformat(sample[1:33,]) %>%
rule_fill_discrete( expression=sample$`Net ` > 0.5)
data(sample)
condformat(sample[1:33,])
condformat(sample[1:33,]) %>% rule_fill_gradient(sample$`Net `)
condformat(sample[1:33,]) %>%
rule_fill_discrete( expression=sample$`Net ` > 0.5)
data(sample)
condformat(sample[1:5,])
condformat(sample[1:5,]) %>% rule_fill_gradient(sample$`Net `)
condformat(sample[1:5,]) %>%
rule_fill_discrete( expression=sample$`Net ` > 0.5)
condformat(sample[1:10,]) %>%
rule_fill_discrete( expression=sample$`Net ` > 0.5)
data(sample)
condformat(sample[1:10,])
condformat(sample[1:10,]) %>% rule_fill_gradient(sample$`Net `)
condformat(sample[1:10,]) %>%
rule_fill_discrete( expression=sample$`Net ` > 0.5)
datatable(sample) %>%
formatStyle(sample$`Net `, fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
sample$`Net `,
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
sample$`Net `,
transform = 'rotateX(45deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(sample$`Net `>0.5), c('lightblue', 'lightgreen', 'lightpink')
)
)
data(sample) %>%
formatStyle(sample$`Net `, fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
sample$`Net `,
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
sample$`Net `,
transform = 'rotateX(45deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(sample$`Net `>0.5), c('lightblue', 'lightgreen', 'lightpink')
)
)
install.packages("formattable")
library("formattable", lib.loc="~/R/win-library/3.5")
library("condformat", lib.loc="~/R/win-library/3.5")
data(sample) %>%
formatStyle(sample$`Net `, fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
sample$`Net `,
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
sample$`Net `,
transform = 'rotateX(45deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(sample$`Net `>0.5), c('lightblue', 'lightgreen', 'lightpink')
)
)
data(sample)
library(readxl)
sample <- read_excel("sample.xlsx")
View(sample)
data(sample)
data("sample.xlsx")
formatStyle(sample$`Net `, fontWeight = styleInterval(5, c('normal', 'bold'))) %>%
formatStyle(
sample$`Net `,
color = styleInterval(c(3.4, 3.8), c('white', 'blue', 'red')),
backgroundColor = styleInterval(3.4, c('gray', 'yellow'))
) %>%
formatStyle(
sample$`Net `,
transform = 'rotateX(45deg) rotateY(20deg) rotateZ(30deg)',
backgroundColor = styleEqual(
unique(sample$`Net `>0.5), c('lightblue', 'lightgreen', 'lightpink')
)
)
install.packages("RPushbullet")
install.packages("RJDBC")
shiny::runApp('GTX_attendance')
install.packages("rJava")
library(RJDBC)
library(RJDBC)
library(rJava)
str(fromJSON(pbGetDevices()))
library("jsonlite", lib.loc="~/R/win-library/3.5")
install.packages("rjson")
str(fromJSON(pbGetDevices()))
library("rjson", lib.loc="~/R/win-library/3.5")
str(fromJSON(pbGetDevices()))
library(RJDBC)
library(rJava)
library("rJava", lib.loc="~/R/win-library/3.5")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.5")
?actionButton
?ReferenceClasses
?actionButton
?refresh
?reactivePoll
?observeEvent
setwd("~/")
setwd("~/Internship - GTX/BI_Reporting/POCs")
shiny::runApp()
runApp()
library(RODBC)
connHandle <- odbcConnect("ORA_XE", uid="SYSTEM", pwd="1234")
data  = sqlQuery(connHandle, "SELECT * FROM responses")
View(data)
library(RODBC)
connHandle <- odbcConnect("ORA_XE", uid="SYSTEM", pwd="1234")
data  = sqlQuery(connHandle, "  SELECT R.FIRST_NAME,
R.LAST_NAME ,
SUM(TRUNC((TO_DATE(R.TIMESTAMP||' '||R.out_time,'DD-MM-YYYY HH24:MI') -  TO_DATE(R.TIMESTAMP||' '||R.in_time,'DD-MM-YYYY HH24:MI')) *1440/60)) AS HOUR_DIFF,
r.timestamp
FROM RESPONSES R
WHERE r.system = 'NOBEL' GROUP BY R.FIRST_NAME,R.LAST_NAME,R.TIMESTAMP;")
View(data)
library (ggplot2)
